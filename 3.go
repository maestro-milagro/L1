package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

//Дана последовательность чисел: 2,4,6,8,10.
//Найти сумму их квадратов с использованием конкурентных вычислений.

// Чтобы добиться конкурентного вычисления суммы м так же воспользуемся горутинами и sync.WaitGroup чтобы дождаться выполнения
// всех горутин. Но в данном случае одного выполнения всех горутин не достаточно так как при использовании обычной переменной типа int
// горутины могут попытаться одновременно изменить переменную из за чего часть вычислений может пропасть.
// Чтобы избежать этого мы поставим тип переменной int64 и будем увеличивать её значение с помощью atomic.AddInt64
func main() {
	var wg sync.WaitGroup
	var sum int64
	calc := func(num int64) {
		k := num * num
		atomic.AddInt64(&sum, k)
		wg.Done()
	}
	arr := []int64{2, 4, 6, 8, 10}
	for i := 0; i < len(arr); i++ {
		wg.Add(1)
		go calc(arr[i])
	}
	wg.Wait()
	fmt.Println(sum)
}
